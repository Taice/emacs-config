#+TITLE:GNU Emacs config
#+AUTHOR: Taice
#+DESCRIPTION: Config
#+STARTUP: overview
#+OPTIONS: toc:3

* TABLE OF CONTENTS :toc:
- [[#elpaca-package-manager][Elpaca Package Manager]]
- [[#evil-mode][Evil Mode]]
  - [[#evil-mode-1][Evil mode]]
  - [[#evil-surround][Evil-surround]]
- [[#general-keybinds][General Keybinds]]
- [[#which-key][Which-key]]
- [[#gui-tweaks][GUI Tweaks]]
  - [[#disable-menubar-toolbars-and-scrollbars][Disable Menubar, Toolbars and Scrollbars]]
  - [[#display-line-numbers-and-truncated-lines][Display Line Numbers and Truncated Lines]]
- [[#fonts][Fonts]]
  - [[#defining-fonts-used-by-emacs][Defining Fonts used by Emacs]]
  - [[#font-size-keybinds][Font size keybinds]]
- [[#org-mode][Org Mode]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
  - [[#org-tempo][Org Tempo]]
- [[#sudo-edit][Sudo edit]]
- [[#theme][Theme]]
  - [[#gruber-darker][Gruber Darker]]
  - [[#sima-boi][Sima boi]]
- [[#ivy][Ivy]]
- [[#all-the-icons][All the Icons]]
- [[#font-icons][Font icons]]
- [[#shells-and-terminals][Shells and Terminals]]
  - [[#eshell][Eshell]]
  - [[#vterm][Vterm]]
  - [[#vterm-toggle][Vterm-toggle]]
- [[#move-text][Move Text]]
- [[#colorizer][Colorizer]]
- [[#dashboard][Dashboard]]
- [[#projectile][Projectile]]
- [[#lsp][LSP]]
  - [[#treesitter][Treesitter]]
  - [[#kdl-mode][Kdl mode]]
  - [[#zig-mode][Zig mode]]
  - [[#lsp-mode][Lsp mode]]
  - [[#rustic][Rustic]]
  - [[#flycheck][Flycheck]]
  - [[#completion-company][Completion (Company)]]
  - [[#c-hooks][C hooks]]
  - [[#formatter][Formatter]]
- [[#highlight-todos][Highlight Todos]]
  - [[#magit][Magit]]
- [[#diminish][Diminish]]
- [[#centered-scrolling][Centered scrolling]]
- [[#auto-save-and-backup-files][Auto Save and backup files]]

* Elpaca Package Manager
#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.11)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                :ref nil :depth 1 :inherit ignore
                                :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                                :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (<= emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
          (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                    ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                    ,@(when-let* ((depth (plist-get order :depth)))
                                                        (list (format "--depth=%d" depth) "--no-single-branch"))
                                                    ,(plist-get order :repo) ,repo))))
                    ((zerop (call-process "git" nil buffer t "checkout"
                                          (or (plist-get order :ref) "--"))))
                    (emacs (concat invocation-directory invocation-name))
                    ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                          "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                    ((require 'elpaca))
                    ((elpaca-generate-autoloads "elpaca" repo)))
              (progn (message "%s" (buffer-string)) (kill-buffer buffer))
            (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (let ((load-source-file-function nil)) (load "./elpaca-autoloads"))))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))
#+end_src
* Evil Mode
** Evil mode
#+begin_src emacs-lisp
  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable :elpaca use-package keyword.
    (elpaca-use-package-mode)
    ;; Assume :elpaca t unless otherwise specified.
    (setq elpaca-use-package-by-default t))

  ;; Block until current queue processed.
  (elpaca-wait)

  ;;When installing a package which modifies a form used at the top-level
  ;;(e.g. a package which adds a use-package key word),
  ;;use `elpaca-wait' to block until that package has been installed/configured.
  ;;For example:
  ;;(use-package general :demand t)
  ;;(elpaca-wait)

  ;; Expands to: (elpaca evil (use-package evil :demand t))
  (use-package evil
    :init      ;; tweak evil's configuration before loading it
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (evil-mode))
  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-mode-list '(dashboard dired ibuffer))
    (evil-collection-init))
  (use-package evil-tutor)

  ;;Turns off elpaca-use-package-mode current declartion
  ;;Note this will cause the declaration to be interpreted immediately (not deferred).
  ;;Useful for configuring built-in emacs features.
  (use-package emacs :ensure nil :config (setq ring-bell-function #'ignore))
#+end_src
** Evil-surround
#+begin_src emacs-lisp
  (electric-pair-mode 1)
  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1))
#+end_src
* General Keybinds
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup)
    
    ;; set up 'SPC' as the global leader key
    (general-create-definer my/leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC" ;; set leader
      :global-prefix "M-SPC") ;; access leader in insert mode
    ;; Random
    (my/leader-keys
      "gc" '(comment-line :wk "Comment-line")
      "w" '(save-buffer :wk "Write to file"))
    ;; File 
    (my/leader-keys
      "f" '(:ignore t :wk "File")
      "ff" '(find-file :wk "Find files")
      "fr" '(counsel-recentf :wk "Find recent files"))
    ;; Config
    (my/leader-keys
      "c" '(:ignore t :wk "Config")
      "cn" '((lambda () (interactive) (find-file "~/.config/niri/config.kdl")) :wk "Niri config")
      "ce" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "Emacs config"))
    ;; Buffer
    (my/leader-keys
      "b" '(:ignore t :wk "Buffer")
      "bb" '(switch-to-buffer :wk "Switch buffer")
      "bi" '(ibuffer :wk "Ibuffer")
      "bk" '(kill-this-buffer :wk "Kill this buffer")
      "bn" '(next-buffer :wk "Next buffer")
      "bp" '(previous-buffer :wk "Previous buffer")
      "br" '(revert-buffer :wk "Reload buffer"))
    ;; Eval
    (my/leader-keys
      "e" '(:ignore t :wk "Evaluate/Eshell")
      "eb" '(eval-buffer :wk "Evaluate elisp buffer")
      "el" '(eval-print-last-sexp :wk "Eval elisp expression before point")
      "ev" '(eval-region :wk "Eval region")
      "es" '(eshell :wk "Eshell"))
    ;; Help
    (my/leader-keys
      "h" '(:ignore t :wk "Help")
      "hf" '(describe-function :wk "Help function")
      "hv" '(describe-variable :wk "Help variable")
      "hr" '((lambda () (interactive)
  	     (load-file "~/.config/emacs/init.el"))
  	   :wk "Reload emacs"))
    ;; Toggle
    (my/leader-keys
      "t" '(:ignore t :wk "Toggle/tabs")
      "tt" '(visual-line-mode :wk "Toggle truncated lines")
      "tv" '(vterm-toggle :wk "Toggle Vterm")
      "tl" '(tab-next :wk "Next tab")
      "th" '(tab-previous :wk "Previous tab")) 
    ;; Org mode
    (my/leader-keys
      "o" '(:ignore t :wk "Org mode")
      "oa" '(org-agenda :wk "Org agenda")
      "o-" '(org-ctrl-c-minus :wk "C-c -"))
    ;; Dired
    (my/leader-keys
      "d" '(:ignore t :wk "Dired")
      "dd" '(dired :wk "open dired")
      "db" '(dired :wk "open dired in current buffer's directory"))
    ;; Lsp
    (my/leader-keys
      "l" '(:ignore t :wk "Lsp")
      "ld" '(flycheck-list-errors :wk "List diagnoses in file")
      "lr" '(lsp-rename :wk "Rename type/variable/function")
      "lg" '(lsp-find-definition :wk "Go to definition")
      "li" '(lsp-goto-implementation :wk "Go to definition")
      "lc" '(compile :wk "Compile code with specified command"))
    ;; Cargo
    (my/leader-keys
      "cc" '(:ignore t :wk "Cargo/rust stuff")
      "ccr" '(rustic-cargo-run-rerun :wk "Run with rustic-run-arguments")
      "cct" '(rustic-cargo-test :wk "Run cargo test")
      "cca" '(rustic-cargo-add :wk "Add cargo dependency"))
    ;; Magit
    (my/leader-keys
      "g" '(:ignore t :which-key "git")
      "gs" '(magit-status :which-key "status")
      "gc" '(magit-commit :which-key "commit")
      "gb" '(magit-branch :which-key "branch")
      "gl" '(magit-log :which-key "log")
      "gp" '(magit-pull :which-key "pull")
      "gP" '(magit-push :which-key "push"))
    )
#+end_src

* Which-key
#+begin_src emacs-lisp
  (use-package which-key
    :init
    (which-key-mode 1)
    :config
    (setq which-key-side-window-location 'bottom
  	which-key-sort-order #'which-key-key-order-alpha
  	which-key-sort-uppercase-first nil
  	which-key-add-column-padding 1
  	which-key-max-display-columns nil
  	which-key-min-display-lines 6
  	which-key-side-window-slot -10
  	which-key-side-window-max-height 0.25
  	which-key-idle-delay 0.8
  	which-key-max-description-length 25
  	which-key-allow-imprecise-window-fit nil
  	which-key-separator " â†’ " ))
#+end_src

* GUI Tweaks
Let's make GNU Emacs look a little better.

** Disable Menubar, Toolbars and Scrollbars
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

** Display Line Numbers and Truncated Lines
#+begin_src emacs-lisp
  (setq display-line-numbers-type 'relative) 
  (global-display-line-numbers-mode)
  (global-visual-line-mode t)
#+end_src

* Fonts
** Defining Fonts used by Emacs
Defining the various fonts that Emacs will use.

#+begin_src emacs-lisp
  (set-face-attribute 'default nil
  		    :font "Iosevka"
  		    :height 110
  		    :weight 'medium)
  (set-face-attribute 'variable-pitch nil
  		    :font "Iosevka"
  		    :height 120
  		    :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
  		    :font "Iosevka"
  		    :height 110
  		    :weight 'medium)
  ;; Makes commented text and keywords italics.
  ;; Your font must have an italic face available.
  (set-face-attribute 'font-lock-comment-face nil
  		    :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
  		    :slant 'italic)

  ;; This sets the default font on all graphical frames created after restarting Emacs.
  ;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
  ;; are not right unless I also add this method of setting the default font.
  (add-to-list 'default-frame-alist '(font . "Iosevka-14"))

  ;; Uncomment the following line if line spacing needs adjusting.
  (setq-default line-spacing 0.12)

#+end_src

** Font size keybinds
#+begin_src emacs-lisp
  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
#+end_src
* Org Mode
** Enabling Table of Contents
#+begin_src emacs-lisp
  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Enabling Org Bullets
Org-bullets gives us attractive bullets rather than asterisks.

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Org Tempo
#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src
* Sudo edit
- Sudo edit allows editing files behind sudo privileges
#+begin_src emacs-lisp
  (use-package sudo-edit
    :config 
    ;; Keybinds
    (my/leader-keys
      "s" '(:ignore t :wk "Sudo edit")
      "sf" '(sudo-edit-find-file :wk "Find sudo file to edit")
      "se" '(sudo-edit :wk "Edit this file with sudo"))
    )
#+end_src
* Theme
** Gruber Darker
#+begin_src emacs-lisp
  (use-package gruber-darker-theme
    :ensure t)
#+end_src

** Sima boi
#+begin_src emacs-lisp
  (add-to-list 'custom-theme-load-path "~/.config/emacs/themes/")
  (load-theme 'tai t)
#+end_src
* Ivy
- Ivy is a completion mechanism for Emacs.
- Counsel is a collection of Ivy-enhancev ersions of commen Emacs commands.
- Ivy-rich provides decsriptions to comands in M-x.
  #+begin_src emacs-lisp
    (use-package counsel
      :after ivy
      :config (counsel-mode))

    (use-package ivy
      :bind
      ;; ivy-resume resumes the last Ivy-based completion.
      (("C-c C-r" . ivy-resume)
       ("C-x B" . ivy-switch-buffer-other-window))
      :custom
      (setq ivy-use-virtual-buffers t)
      (setq ivy-count-format "(%d/%d) ")
      (setq enable-recursive-minibuffers t)
      :config
      (ivy-mode))

    (use-package all-the-icons-ivy-rich
      :ensure t
      :init (all-the-icons-ivy-rich-mode 1))

    (use-package ivy-rich
      :after ivy
      :ensure t
      :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
      :custom
      (ivy-virtual-abbreviate 'full
    			  ivy-rich-switch-buffer-align-virtual-buffer t
    			  ivy-rich-path-style 'abbrev)
      :config
      (ivy-set-display-transformer 'ivy-switch-buffer
                                   'ivy-rich-switch-buffer-transformer))
  #+end_src
  
* All the Icons
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src
* Font icons
#+begin_src emacs-lisp
  (use-package nerd-icons)
#+end_src
* Shells and Terminals
** Eshell
#+begin_src emacs-lisp
  (use-package eshell-syntax-highlighting
    :after esh-mode
    :config
    (eshell-syntax-highlighting-global-mode +1))

  ;; eshell-syntax-highlighting -- adds fish/zsh-like syntax highlighting.
  ;; eshell-rc-script -- your profile for eshell; like a bashrc for eshell.
  ;; eshell-aliases-file -- sets an aliases file for the eshell.

  (setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
        eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
        eshell-history-size 5000
        eshell-buffer-maximum-lines 5000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t
        eshell-destroy-buffer-when-process-dies t
        eshell-visual-commands'("bash" "fish" "htop" "ssh" "top" "zsh"))
#+end_src
** Vterm
#+begin_src emacs-lisp
  (use-package vterm
    :config
    (setq shell-file-name "/bin/sh"
  	vterm-max-scrollback 5000))
#+end_src
** Vterm-toggle
#+begin_src emacs-lisp
  (use-package vterm-toggle
    :after vterm
    :config
    (setq vterm-toggle-fullscreen-p nil)
    (setq vterm-toggle-scope 'project)
    (add-to-list 'display-buffer-alist
                 '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                   (display-buffer-reuse-window display-buffer-at-bottom)
                   ;;(display-buffer-reuse-window display-buffer-in-direction)
                   ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                   ;;(direction . bottom)
                   ;;(dedicated . t) ;dedicated is supported in emacs27
                   (reusable-frames . visible)
                   (window-height . 0.6))))
#+end_src
* Move Text
#+begin_src emacs-lisp
  (defun move-word-left ()
    "Move the word at point one word to the left."
    (interactive)
    (transpose-words -1))

  (defun move-word-right ()
    "Move the word at point one word to the right."
    (interactive)
    (transpose-words 1))

  ;; Load and configure move-text
  (use-package move-text
    :ensure t
    :config
    ;; Bind keys in normal and visual mode
    (general-define-key
     :states '(normal visual)
     "H" 'move-word-left
     "L" 'move-word-right
     "J" 'move-text-down
     "K" 'move-text-up))
#+end_src

* Colorizer
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :hook org-mode prog-mode)
#+end_src

* Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t 
    :init
    (setq initial-buffer-choice 'dashboard-open)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
    (setq dashboard-startup-banner "~/.config/emacs/images/funny-cat.jpg")  ;; use custom image as banner
    (setq dashboard-center-content t) ;; set to 't' for centered content
    (setq dashboard-set-footer nil)
    (setq dashboard-items '((recents . 5)))
    (setq dashboard-startupify-list '(dashboard-insert-banner
  				    dashboard-insert-items))
    :custom
    (dashboard-modify-heading-icons '((recents . "file-text")
                                      (bookmarks . "book")))
    :config
    (add-hook 'elpaca-after-init-hook #'dashboard-insert-startupify-lists)
    (add-hook 'elpaca-after-init-hook #'dashboard-initialize)
    (dashboard-setup-startup-hook))
#+end_src

* Projectile
For Projects integration with dashboard
#+begin_src emacs-lisp
  (use-package projectile
    :config
    (projectile-mode 1))
#+end_src

* LSP
** Treesitter
#+begin_src emacs-lisp
  (use-package tree-sitter
    :ensure t
    :hook ((prog-mode . tree-sitter-mode)
           (tree-sitter-after-on . tree-sitter-hl-mode)))

  (use-package tree-sitter-langs
    :after tree-sitter
    :ensure t)
#+end_src
** Kdl mode
#+begin_src emacs-lisp
  (use-package kdl-mode)
#+end_src
** Zig mode
#+begin_src emacs-lisp
  (use-package zig-mode
    :hook (lsp . zig-mode-hook))
#+end_src
** Lsp mode
#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure
    :commands lsp
    :custom
    (lsp-zig-zls-executable "/home/tai/.local/bin/zls")
    (lsp-zig-zig-exe-path "/home/tai/.local/bin/zig")
    ;; what to use when checking on-save. "check" is default, I prefer clippy
    (lsp-rust-analyzer-cargo-watch-command "clippy")
    (lsp-eldoc-render-all nil)
    (lsp-idle-delay 0.0)
    ;; enable / disable the hints as you prefer:
    (lsp-inlay-hint-enable nil)
    ;; These are optional configurations. See https://emacs-lsp.github.io/lsp-mode/page/lsp-rust-analyzer/#lsp-rust-analyzer-display-chaining-hints for a full list
    (lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
    (lsp-rust-analyzer-display-chaining-hints t)
    (lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil)
    (lsp-rust-analyzer-display-closure-return-type-hints t)
    (lsp-rust-analyzer-display-parameter-hints nil)
    (lsp-rust-analyzer-display-reborrow-hints nil)
    :config
    (add-hook 'lsp-mode-hook 'lsp-ui-mode))

  (use-package lsp-ui
    :ensure
    :commands lsp-ui-mode
    :custom
    (lsp-ui-peek-always-show t)
    (lsp-ui-sideline-show-hover nil)
    (lsp-ui-doc-enable nil))
#+end_src
** Rustic
#+begin_src emacs-lisp
  (use-package rustic
    :ensure
    :config
    ;; uncomment for less flashiness
    ;; (setq lsp-eldoc-hook nil)
    ;; (setq lsp-enable-symbol-highlighting nil)
    ;; (setq lsp-signature-auto-activate nil)

    ;; comment to disable rustfmt on save
    (setq rustic-format-on-save t)
    (add-hook 'rustic-mode-hook 'rk/rustic-mode-hook))

  (defun rk/rustic-mode-hook ()
    ;; so that run C-c C-c C-r works without having to confirm, but don't try to
    ;; save rust buffers that are not file visiting. Once
    ;; https://github.com/brotzeit/rustic/issues/253 has been resolved this should
    ;; no longer be necessary.
    (when buffer-file-name
      (setq-local buffer-save-without-query t))
    (add-hook 'before-save-hook 'lsp-format-buffer nil t))
#+end_src
** Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :defer t
    :diminish
    :init (global-flycheck-mode))
  (use-package flycheck-inline
    :after flycheck)
#+end_src
** Completion (Company)
#+begin_src emacs-lisp
  (use-package company
    :ensure
    :custom
    (company-idle-delay 0.1) ;; how long to wait until popup
    ;; (company-begin-commands nil) ;; uncomment to disable popup
    :config
    (general-define-key
     :states 'insert
     "C-j" 'company-select-next
     "C-k" 'company-select-previous))

  (use-package yasnippet
    :ensure
    :config
    (yas-reload-all)
    (add-hook 'prog-mode-hook 'yas-minor-mode)
    (add-hook 'text-mode-hook 'yas-minor-mode))
#+end_src
** C hooks
#+begin_src emacs-lisp
  (add-hook 'c-mode-hook 'lsp)
  (add-hook 'c++-mode-hook 'lsp)
#+end_src
** Formatter
#+begin_src emacs-lisp
  (use-package format-all
    :preface
    (defun format-code ()
      "Auto-format whole buffer."
      (interactive)
      (if (derived-mode-p 'prolog-mode)
          (prolog-indent-buffer)
        (format-all-buffer)))
    :config
    (my/leader-keys "lf" '(format-code :wk "Format buffer"))
    (add-hook 'prog-mode-hook #'format-all-ensure-formatter))
#+end_src
* Highlight Todos
#+begin_src emacs-lisp
  (use-package hl-todo
    :hook ((org-mode . hl-todo-mode)
           (prog-mode . hl-todo-mode))
    :config
    (setq hl-todo-highlight-punctuation ":"
          hl-todo-keyword-faces
          `(("TODO"       warning bold)
            ("FIXME"      error bold)
            ("HACK"       font-lock-constant-face bold)
            ("REVIEW"     font-lock-keyword-face bold)
            ("NOTE"       success bold)
            ("DEPRECATED" font-lock-doc-face bold))))
#+end_src
i* Git
** Magit
#+begin_src emacs-lisp
  (use-package transient)
  (use-package magit
    :ensure t
    :config
    (defadvice magit-status (around magit-fullscreen activate)
      (window-configuration-to-register :magit-fullscreen)
      ad-do-it
      (delete-other-windows))

    (add-hook 'magit-mode-hook
              (lambda ()
                (local-set-key (kbd "q")
                               (lambda ()
                                 (interactive)
                                 (kill-buffer)
                                 (jump-to-register :magit-fullscreen))))))
#+end_src

* Diminish
#+begin_src emacs-lisp
  (use-package diminish)
#+end_src

* Centered scrolling
#+begin_src emacs-lisp
  ;; keep the cursor centered to avoid sudden scroll jumps
  (use-package centered-cursor-mode
    :config
    ;; disable in terminal modes
    ;; http://stackoverflow.com/a/6849467/519736
    ;; also disable in Info mode, because it breaks going back with the backspace key
    (define-global-minor-mode my-global-centered-cursor-mode centered-cursor-mode
      (lambda ()
        (when (not (memq major-mode
                         (list 'Info-mode 'term-mode 'eshell-mode 'shell-mode 'erc-mode)))
  	(centered-cursor-mode))))
    (my-global-centered-cursor-mode 1))
#+end_src
* Auto Save and backup files
#+begin_src emacs-lisp
;; Disable backup files (file~)
(setq make-backup-files nil)
;; Disable auto-save files (#file#)
(setq auto-save-default nil)
#+end_src>
